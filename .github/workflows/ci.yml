name: CLIgen CI

on:

  push:
    branches:
      - master
      - test-actions
  pull_request:
    branches: [ master ]

permissions:
  contents: write
  pull-requests: write

jobs:
  ubuntu-build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: install expect
        run: sudo apt install -y expect
      - name: configure
        run: ./configure
      - name: make
        run: make
      - name: make install
        run: sudo make install
      - name: ldconfig
        run: sudo ldconfig
      - name: make test
        run: make test

  ubuntu-coverage:
    needs: ubuntu-build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: install expect
        run: sudo apt install -y expect
      - name: configure w coverage
        run: ./configure CPPFLAGS="-fprofile-arcs -ftest-coverage -O0" CFLAGS="" LDFLAGS="-fprofile-arcs -lgcov"
      - name: make
        run: make
      - name: make install
        run: sudo make install
      - name: ldconfig
        run: sudo ldconfig
      - name: make test
        run: make test
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  create_deb_packet:
    #if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-20.04
    env:
      VERSION: "7.1.0"
    permissions: write-all
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
      - name: Git describe
        id: ghd
        uses: proudust/gh-describe@v2
      - run: sudo apt update && sudo apt install build-essential flex fakeroot bison lsb-release make debhelper libnghttp2-dev libssl-dev -y
      - name: create dir for build
        run: mkdir ${{ github.workspace }}/build
      - name: configure
        run: ./configure
      - name: make
        run: make
      - name: install
        run: sudo make install DESTDIR=${{ github.workspace }}/build
      - name: copy file for build deb packet dev
        run: cp -r ${{ github.workspace }}/debian ${{ github.workspace }}/build
      - name: add change log
        run: cd ${{ github.workspace }}/build/debian && export NAME_VERSION="cligen (${{env.VERSION}}-${{steps.ghd.outputs.distance}})" && git --no-pager log --no-walk --encoding=utf-8 --expand-tabs=4 --pretty=format:"${NAME_VERSION} stable; urgency=medium%n%n  * %w(,,2)%B%w()%n -- %an <%ae>  %aD%n" > changelog && cat changelog
      - name: run build packet lib and dev
        run: cd ${{ github.workspace }}/build && dpkg-buildpackage -us -uc
      - name: show directory
        run: ls -l ${{ github.workspace }}
      - name: Create deb packet
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{env.VERSION}}_${{steps.ghd.outputs.distance}}
          release_name: cligen_${{env.VERSION}}-${{steps.ghd.outputs.distance}}
          draft: false
          prerelease: false
      - name: Upload artefact
        uses: actions/upload-artifact@v4
        with:
          name: libcligen-dev_${{env.VERSION}}-${{env.steps.ghd.outputs.distance}}_amd64.deb
          path: ${{ github.workspace }}/libcligen-dev_${{env.VERSION}}-${{steps.ghd.outputs.distance}}_amd64.deb
      - name: Upload artefact (cligen)
        uses: actions/upload-artifact@v4
        with:
          name: libcligen_${{env.VERSION}}-${{steps.ghd.outputs.distance}}_amd64.deb
          path: ${{ github.workspace }}/libcligen_${{env.VERSION}}-${{steps.ghd.outputs.distance}}_amd64.deb
